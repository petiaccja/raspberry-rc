
package rccontroller.desktop;

import java.io.IOException;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import rc.client.*;

/**
 * This frame realizes connecting to a server.
 */
public class ConnectFrame extends javax.swing.JFrame {
	private RcClient client;
	private RcController daddy;
	private int state;
	private static final int CONNECTED = 1;
	private static final int DISCONNECTED = 2;
	private static final int CONNECTING = 3;
	private int pinThrottle, pinSteering;
	
	
	/**
	 * Creates new form ConnectFrame.
	 */
	public ConnectFrame(RcController mainFrame) {
		// UI CODE HERE
		initComponents();
		// END OF UI CODE
		
		daddy = mainFrame;
		client = mainFrame.getClient();
		
		state = client.isConnected() ? CONNECTED : DISCONNECTED;
		setBehaviour();
	}
	
	/**
	 * Enables or disables components depending on connection state.
	 */
	private final void setBehaviour() {
		if (state == CONNECTED) {
			btnConnect.setText("Disconnect");
			tfAddress.setEnabled(false);
			tfPassword.setEnabled(false);
			tfSteeringPin.setEnabled(false);
			tfThrottlePin.setEnabled(false);
		}
		else if (state == DISCONNECTED) {
			btnConnect.setText("Connect");
			tfAddress.setEnabled(true);
			tfPassword.setEnabled(true);
			tfSteeringPin.setEnabled(true);
			tfThrottlePin.setEnabled(true);
		}
		else if (state == CONNECTING) {
			btnConnect.setText("Connecting...");
			tfAddress.setEnabled(false);
			tfPassword.setEnabled(false);
			tfSteeringPin.setEnabled(false);
			tfThrottlePin.setEnabled(false);
		}
	}
	
	/**
	 * Restores saved values from the last session.
	 */
	public void restoreValues(SaveSettings values) {
		tfAddress.setText(values.address + ":" + values.port);
		tfThrottlePin.setText(Integer.toString(values.pinThrottle));
		tfSteeringPin.setText(Integer.toString(values.pinSteering));
	}
	
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfPassword = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tfThrottlePin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfSteeringPin = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        btnConnect = new javax.swing.JButton();

        setTitle("Connection");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 60));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 60));
        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        jLabel1.setText("Address");
        jPanel1.add(jLabel1);
        jPanel1.add(tfAddress);

        jLabel2.setText("Password:");
        jPanel1.add(jLabel2);
        jPanel1.add(tfPassword);

        getContentPane().add(jPanel1);

        jSeparator1.setMaximumSize(new java.awt.Dimension(32767, 10));
        getContentPane().add(jSeparator1);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 60));
        jPanel2.setPreferredSize(new java.awt.Dimension(400, 60));
        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        jLabel4.setText("Throttle pin:");
        jPanel2.add(jLabel4);

        tfThrottlePin.setText("11");
        jPanel2.add(tfThrottlePin);

        jLabel3.setText("Steering pin:");
        jPanel2.add(jLabel3);

        tfSteeringPin.setText("17");
        jPanel2.add(tfSteeringPin);

        getContentPane().add(jPanel2);

        jSeparator2.setMaximumSize(new java.awt.Dimension(32767, 10));
        getContentPane().add(jSeparator2);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 45));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 45));
        jPanel3.setLayout(new java.awt.GridLayout(1, 1));

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        jPanel3.add(btnConnect);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed

		// connect / disconnect
		if (!client.isConnected()) {
			state = DISCONNECTED;
			
			// vars
			String address, password;
			int port = 0;
			String errorMsg = null;
			
			// parse shit
			address = tfAddress.getText();
			int idx = address.indexOf(':');
			if (idx <= 0 || idx+1 >= address.length()) {
				errorMsg = "invalid address format, must be \"address:port\"";
			}
			else {
				String addrTmp = address.substring(idx+1);
				address = address.substring(0, idx);
				try {
					port = Integer.parseInt(addrTmp);
				}
				catch (NumberFormatException e) {
					errorMsg = "port format not valid";
				}
			}
			password = tfPassword.getText();
			
			try {
				pinThrottle = Integer.parseInt(tfThrottlePin.getText());
				pinSteering = Integer.parseInt(tfSteeringPin.getText());
			}
			catch (NumberFormatException e) {
				errorMsg = "pin number are of invalid format";
			}
			
			
			// check parsing results
			if (errorMsg != null) {
				// display error popup window
				JOptionPane.showMessageDialog(this,
						"Connection failed: " + errorMsg + ".", 
						"Error",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// connect
			try {
				state = CONNECTING;
				setBehaviour();
				daddy.connect(address, port, password.getBytes(), pinThrottle, pinSteering);
				state = CONNECTED;
				setBehaviour();
			}
			catch (UnknownHostException e) {
				errorMsg = "could not find host";
			}
			catch (IOException e) {
				errorMsg = "network error";
			}
			catch (InvalidPasswordException e) {
				errorMsg = "wrong password";
			}
			catch (HostRejectedException e) {
				errorMsg = "connection refused by server";
			}
			catch (IllegalStateException e) {
				errorMsg = "already connected";
			}
			catch (Exception e) {
				errorMsg = e.getMessage();
			}
			
			// check connection results
			if (errorMsg != null) {
				// display error popup window
				JOptionPane.showMessageDialog(this,
						"Connection failed: " + errorMsg + ".",
						"Error",
						JOptionPane.ERROR_MESSAGE);
				// set state back
				state = DISCONNECTED;
				setBehaviour();
			}
		}
		else {
			state = DISCONNECTED;
			setBehaviour();
			client.close();
		}
    }//GEN-LAST:event_btnConnectActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // update state on focus gained
		state = client.isConnected() ? CONNECTED : DISCONNECTED;
		setBehaviour();
    }//GEN-LAST:event_formWindowGainedFocus

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfSteeringPin;
    private javax.swing.JTextField tfThrottlePin;
    // End of variables declaration//GEN-END:variables
}
